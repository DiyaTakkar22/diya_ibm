{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DiyaTakkar\\\\Desktop\\\\diya\\\\ibm-final-demos-may-2024-main\\\\03-ibm-frontend-react\\\\src\\\\components\\\\user\\\\Register.js\",\n  _s = $RefreshSig$();\n// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import UserService from \"../../services/UserService\";\n// import { useDispatch } from \"react-redux\";\n// import { userRegister } from \"../../redux/UserSlice\";\n\n// const Register = () => {\n\n//     const [registerData, setRegisterData] = useState({ username: '', password: '' });\n//     const [afterRegisterMessage, setAfterRegisterMessage] = useState('');\n//     const navigate = useNavigate();\n//     const dispatch = useDispatch();\n\n//     const handleChange = (evt) => {\n//         console.log(evt.target.name);\n//         console.log(evt.target.value);\n//         setRegisterData({\n//             ...registerData,\n//             [evt.target.name]: evt.target.value\n//         });\n//     };\n\n//     const handleRegisterSubmit = async (evt) => {\n//         evt.preventDefault();\n//         console.log(registerData);\n//         UserService.registerUser(registerData)\n//             .then((response) => {\n//                 console.log(response);\n//                 dispatch(userRegister(response));\n//                 setRegisterData({ username: '', password: '' });\n//                 setAfterRegisterMessage(`Hi ${response.username}! You've registered successfully!`);\n//                 setTimeout(() => {\n//                     navigate('/login');\n//                 }, 2000);\n//             })\n//             .catch((error) => {\n//                 console.log(error);\n//                 setAfterRegisterMessage(`Invalid credentials!`);\n//             });\n\n//     };\n\n//     return (\n//         <>\n//             <h1>Register Component</h1>\n//             <p>Register here</p>\n//             <form onSubmit={handleRegisterSubmit}>\n//                 <input type=\"text\" name=\"username\" value={registerData.username}\n//                     onChange={handleChange} autoFocus required />\n//                 <br />\n//                 <input type=\"password\" name=\"password\" value={registerData.password}\n//                     onChange={handleChange} required />\n//                 <br />\n//                 <input type=\"submit\" value=\"Register\" />\n//             </form>\n//             <>\n//                 <p>{afterRegisterMessage && afterRegisterMessage} </p>\n//             </>\n//             <p>Already registered? <Link to={'/login'}>Login</Link> </p>\n\n//         </>\n//     );\n// };\n// export default Register;\n\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport UserService from \"../../services/UserService\";\nimport { useDispatch } from \"react-redux\";\nimport { userRegister } from \"../../redux/UserSlice\";\nimport \"./register.css\"; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [registerData, setRegisterData] = useState({\n    username: '',\n    password: ''\n  });\n  const [afterRegisterMessage, setAfterRegisterMessage] = useState('');\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const handleChange = evt => {\n    setRegisterData({\n      ...registerData,\n      [evt.target.name]: evt.target.value\n    });\n  };\n  const handleRegisterSubmit = async evt => {\n    evt.preventDefault();\n    UserService.registerUser(registerData).then(response => {\n      dispatch(userRegister(response));\n      setRegisterData({\n        username: '',\n        password: ''\n      });\n      setAfterRegisterMessage(`Hi ${response.username}! You've registered successfully!`);\n      setTimeout(() => {\n        navigate('/login');\n      }, 2000);\n    }).catch(error => {\n      setAfterRegisterMessage(`Invalid credentials!`);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Register here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleRegisterSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"username\",\n          value: registerData.username,\n          onChange: handleChange,\n          autoFocus: true,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: registerData.password,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"register-button\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), afterRegisterMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: afterRegisterMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 38\n    }, this), afterRegisterMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: afterRegisterMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Already registered? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: '/login',\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"Y+1pSLZ2iUQa/YOaEZ2pHKt5hoI=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","Link","useNavigate","UserService","useDispatch","userRegister","jsxDEV","_jsxDEV","Register","_s","registerData","setRegisterData","username","password","afterRegisterMessage","setAfterRegisterMessage","navigate","dispatch","handleChange","evt","target","name","value","handleRegisterSubmit","preventDefault","registerUser","then","response","setTimeout","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","autoFocus","required","to","_c","$RefreshReg$"],"sources":["C:/Users/DiyaTakkar/Desktop/diya/ibm-final-demos-may-2024-main/03-ibm-frontend-react/src/components/user/Register.js"],"sourcesContent":["// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import UserService from \"../../services/UserService\";\n// import { useDispatch } from \"react-redux\";\n// import { userRegister } from \"../../redux/UserSlice\";\n\n// const Register = () => {\n\n//     const [registerData, setRegisterData] = useState({ username: '', password: '' });\n//     const [afterRegisterMessage, setAfterRegisterMessage] = useState('');\n//     const navigate = useNavigate();\n//     const dispatch = useDispatch();\n\n//     const handleChange = (evt) => {\n//         console.log(evt.target.name);\n//         console.log(evt.target.value);\n//         setRegisterData({\n//             ...registerData,\n//             [evt.target.name]: evt.target.value\n//         });\n//     };\n\n//     const handleRegisterSubmit = async (evt) => {\n//         evt.preventDefault();\n//         console.log(registerData);\n//         UserService.registerUser(registerData)\n//             .then((response) => {\n//                 console.log(response);\n//                 dispatch(userRegister(response));\n//                 setRegisterData({ username: '', password: '' });\n//                 setAfterRegisterMessage(`Hi ${response.username}! You've registered successfully!`);\n//                 setTimeout(() => {\n//                     navigate('/login');\n//                 }, 2000);\n//             })\n//             .catch((error) => {\n//                 console.log(error);\n//                 setAfterRegisterMessage(`Invalid credentials!`);\n//             });\n\n//     };\n\n//     return (\n//         <>\n//             <h1>Register Component</h1>\n//             <p>Register here</p>\n//             <form onSubmit={handleRegisterSubmit}>\n//                 <input type=\"text\" name=\"username\" value={registerData.username}\n//                     onChange={handleChange} autoFocus required />\n//                 <br />\n//                 <input type=\"password\" name=\"password\" value={registerData.password}\n//                     onChange={handleChange} required />\n//                 <br />\n//                 <input type=\"submit\" value=\"Register\" />\n//             </form>\n//             <>\n//                 <p>{afterRegisterMessage && afterRegisterMessage} </p>\n//             </>\n//             <p>Already registered? <Link to={'/login'}>Login</Link> </p>\n\n//         </>\n//     );\n// };\n// export default Register;\n\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport UserService from \"../../services/UserService\";\nimport { useDispatch } from \"react-redux\";\nimport { userRegister } from \"../../redux/UserSlice\";\nimport \"./register.css\"; // Import the CSS file\n\nconst Register = () => {\n\n    const [registerData, setRegisterData] = useState({ username: '', password: '' });\n    const [afterRegisterMessage, setAfterRegisterMessage] = useState('');\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const handleChange = (evt) => {\n        setRegisterData({\n            ...registerData,\n            [evt.target.name]: evt.target.value\n        });\n    };\n\n    const handleRegisterSubmit = async (evt) => {\n        evt.preventDefault();\n        UserService.registerUser(registerData)\n            .then((response) => {\n                dispatch(userRegister(response));\n                setRegisterData({ username: '', password: '' });\n                setAfterRegisterMessage(`Hi ${response.username}! You've registered successfully!`);\n                setTimeout(() => {\n                    navigate('/login');\n                }, 2000);\n            })\n            .catch((error) => {\n                setAfterRegisterMessage(`Invalid credentials!`);\n            });\n\n    };\n\n    return (\n        <div className=\"register-container\">\n            <h1>Register Component</h1>\n            <p>Register here</p>\n            <form onSubmit={handleRegisterSubmit}>\n                <div className=\"form-group\">\n                    <input type=\"text\" name=\"username\" value={registerData.username}\n                        onChange={handleChange} autoFocus required />\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"password\" name=\"password\" value={registerData.password}\n                        onChange={handleChange} required />\n                </div>\n                <button type=\"submit\" className=\"register-button\">Register</button>\n            </form>\n            {afterRegisterMessage && <p className=\"success-message\">{afterRegisterMessage}</p>}\n            {afterRegisterMessage && <p className=\"error-message\">{afterRegisterMessage}</p>}\n            <p>Already registered? <Link to={'/login'}>Login</Link></p>\n        </div>\n    );\n};\nexport default Register;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}