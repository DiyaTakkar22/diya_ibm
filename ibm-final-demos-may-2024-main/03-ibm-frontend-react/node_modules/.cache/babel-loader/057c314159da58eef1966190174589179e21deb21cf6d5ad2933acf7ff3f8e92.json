{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconsole.log('empSlice');\nconst empSlice = createSlice({\n  name: 'emp',\n  initialState: {\n    empObj: {\n      firstName: 'Sonu',\n      salary: 10.50\n    },\n    employees: [] // Array to store list of employees\n  },\n  reducers: {\n    // more methods \n    setEmpObj: (state, action) => {\n      console.log(action.payload);\n      state.empObj = action.payload;\n    },\n    addEmployee: (state, action) => {\n      state.employees.push(action.payload); // Push new employee to the array\n    },\n    updatedEmployee: (state, action) => {\n      const index = state.employees.findIndex(emp => emp.id === action.payload.id);\n      // If the employee is found, update its properties\n      if (index !== -1) {\n        state.employees[index] = action.payload;\n      }\n    }\n  }\n});\nexport default empSlice.reducer;\nexport const {\n  setEmpObj,\n  addEmployee,\n  updatedEmployee\n} = empSlice.actions;","map":{"version":3,"names":["createSlice","console","log","empSlice","name","initialState","empObj","firstName","salary","employees","reducers","setEmpObj","state","action","payload","addEmployee","push","updatedEmployee","index","findIndex","emp","id","reducer","actions"],"sources":["C:/Users/DiyaTakkar/Desktop/diya/ibm-final-demos-may-2024-main/03-ibm-frontend-react/src/redux/EmpSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nconsole.log('empSlice');\nconst empSlice = createSlice({\n    name: 'emp',\n    initialState : { \n        empObj: {firstName: 'Sonu', salary: 10.50}  ,\n        employees: [] // Array to store list of employees\n        \n    },\n    reducers : { // more methods \n        setEmpObj : (state, action) => {\n            console.log(action.payload);\n            state.empObj = action.payload;\n        },\n        addEmployee: (state, action) => {\n            state.employees.push(action.payload); // Push new employee to the array\n        },\n        updatedEmployee:(state,action)=>{\n          const index=state.employees.findIndex(emp=>emp.id===action.payload.id);\n             // If the employee is found, update its properties\n             if (index !== -1) {\n                state.employees[index] = action.payload;\n            }\n        }\n        \n    }\n});\nexport default empSlice.reducer;\n\nexport const {setEmpObj,addEmployee,updatedEmployee} = empSlice.actions;\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9CC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;AACvB,MAAMC,QAAQ,GAAGH,WAAW,CAAC;EACzBI,IAAI,EAAE,KAAK;EACXC,YAAY,EAAG;IACXC,MAAM,EAAE;MAACC,SAAS,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAK,CAAC;IAC1CC,SAAS,EAAE,EAAE,CAAC;EAElB,CAAC;EACDC,QAAQ,EAAG;IAAE;IACTC,SAAS,EAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3BZ,OAAO,CAACC,GAAG,CAACW,MAAM,CAACC,OAAO,CAAC;MAC3BF,KAAK,CAACN,MAAM,GAAGO,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,WAAW,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACH,SAAS,CAACO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;IAC1C,CAAC;IACDG,eAAe,EAACA,CAACL,KAAK,EAACC,MAAM,KAAG;MAC9B,MAAMK,KAAK,GAACN,KAAK,CAACH,SAAS,CAACU,SAAS,CAACC,GAAG,IAAEA,GAAG,CAACC,EAAE,KAAGR,MAAM,CAACC,OAAO,CAACO,EAAE,CAAC;MACnE;MACA,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QACfN,KAAK,CAACH,SAAS,CAACS,KAAK,CAAC,GAAGL,MAAM,CAACC,OAAO;MAC3C;IACJ;EAEJ;AACJ,CAAC,CAAC;AACF,eAAeX,QAAQ,CAACmB,OAAO;AAE/B,OAAO,MAAM;EAACX,SAAS;EAACI,WAAW;EAACE;AAAe,CAAC,GAAGd,QAAQ,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}